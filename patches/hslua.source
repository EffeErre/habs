Index: archhaskell-habs/haskell-hslua/src/hslua-0.3.4/src/Scripting/Lua.hs
===================================================================
--- archhaskell-habs.orig/haskell-hslua/src/hslua-0.3.4/src/Scripting/Lua.hs
+++ archhaskell-habs/haskell-hslua/src/hslua-0.3.4/src/Scripting/Lua.hs
@@ -1,5 +1,5 @@
 
-{-# LANGUAGE ForeignFunctionInterface, TypeSynonymInstances, FlexibleInstances #-}
+{-# LANGUAGE ForeignFunctionInterface, TypeSynonymInstances, FlexibleInstances, ScopedTypeVariables #-}
 {-# OPTIONS_GHC -Wall -fno-warn-name-shadowing -fno-warn-unused-do-bind -fno-warn-unused-binds #-}
 -- |
 -- Module      : Scripting.Lua
@@ -180,6 +180,7 @@ import Prelude hiding (concat)
 import Foreign.C
 import Foreign.Ptr
 import Foreign.StablePtr
+import Control.Exception (catch, SomeException)
 import Control.Monad
 import Foreign.Marshal.Alloc
 import Data.IORef
@@ -961,7 +962,7 @@ newcfunction = mkWrapper . luaimport
 -- Any Haskell exception will be converted to a string and returned
 -- as Lua error.
 luaimport :: LuaImport a => a -> LuaCFunction
-luaimport a l = luaimport' 1 a l `catch` (\e -> push l (show e) >> return (-1))
+luaimport a l = luaimport' 1 a l `catch` (\(e :: SomeException) -> push l (show e) >> return (-1))
 
 -- | Free function pointer created with @newcfunction@.
 freecfunction :: FunPtr LuaCFunction -> IO ()
