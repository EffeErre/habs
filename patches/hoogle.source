Index: archhaskell/haskell-hoogle/src/hoogle-4.2.23/src/General/Web.hs
===================================================================
--- archhaskell.orig/haskell-hoogle/src/hoogle-4.2.23/src/General/Web.hs
+++ archhaskell/haskell-hoogle/src/hoogle-4.2.23/src/General/Web.hs
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 {-# LANGUAGE PatternGuards #-}
 
 {- |
@@ -15,6 +16,9 @@ module General.Web(
 import General.System
 import General.Base
 import Network.Wai
+#if MIN_VERSION_wai(2, 0, 0)
+import Network.Wai.Internal
+#endif
 import Network.HTTP.Types
 import Data.CaseInsensitive(original)
 import qualified Data.ByteString.Lazy.Char8 as LBS
@@ -34,10 +38,17 @@ responseNotFound x = responseLBS status4
 
 responseFlatten :: Response -> IO (Status, ResponseHeaders, LBString)
 responseFlatten r = do
+#if MIN_VERSION_wai(2, 0, 0)
+    let (s,hs,withSrc) = responseToSource r
+    chunks <- withSrc $ \src -> src $$ consume
+    let res = toLazyByteString $ mconcat [x | Chunk x <- chunks]
+    return (s,hs,res)
+#else
     let (s,hs,rest) = responseSource r
     chunks <- runResourceT $ rest $$ consume
     let res = toLazyByteString $ mconcat [x | Chunk x <- chunks]
     return (s,hs,res)
+#endif
 
 
 responseEvaluate :: Response -> IO ()
Index: archhaskell/haskell-hoogle/src/hoogle-4.2.23/src/Web/Server.hs
===================================================================
--- archhaskell.orig/haskell-hoogle/src/hoogle-4.2.23/src/Web/Server.hs
+++ archhaskell/haskell-hoogle/src/hoogle-4.2.23/src/Web/Server.hs
@@ -1,4 +1,4 @@
-{-# LANGUAGE RecordWildCards, ScopedTypeVariables, PatternGuards #-}
+{-# LANGUAGE RecordWildCards, ScopedTypeVariables, PatternGuards, CPP #-}
 
 module Web.Server(server) where
 
@@ -16,6 +16,9 @@ import Control.Exception
 import Data.Time.Clock
 
 import Network.Wai
+#if MIN_VERSION_wai(2, 0, 0)
+import Network.Wai.Internal
+#endif
 import Network.Wai.Handler.Warp
 
 
@@ -34,9 +37,15 @@ server q@Server{..} = do
         return res
 
 
+#if MIN_VERSION_wai(2, 0, 0)
+exception :: Maybe Request -> SomeException -> IO ()
+exception _ e | Just (_ :: InvalidRequest) <- fromException e = return ()
+              | otherwise = putStrLn $ "Error: " ++ show e
+#else
 exception :: SomeException -> IO ()
 exception e | Just (_ :: InvalidRequest) <- fromException e = return ()
             | otherwise = putStrLn $ "Error: " ++ show e
+#endif
 
 
 respArgs :: CmdLine -> IO (IO ResponseArgs)
