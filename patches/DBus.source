Index: archhaskell-habs/haskell-dbus/src/DBus-0.4/DBus.hsc
===================================================================
--- archhaskell-habs.orig/haskell-dbus/src/DBus-0.4/DBus.hsc
+++ archhaskell-habs/haskell-dbus/src/DBus-0.4/DBus.hsc
@@ -2,7 +2,7 @@
 -- Copyright (C) 2006 Evan Martin <martine@danga.com>
 
 #define DBUS_API_SUBJECT_TO_CHANGE
-#include "dbus/dbus.h"
+#include <dbus/dbus.h>
 
 module DBus (
   module DBus.Shared,
@@ -24,6 +24,7 @@ module DBus (
 
 import DBus.Shared
 import Data.Typeable (Typeable(..), mkTyConApp, mkTyCon)
+import Control.Exception
 
 -- |'Error's carry a name (like \"org.freedesktop.dbus.Foo\") and a
 -- message (like \"connection failed\").
@@ -32,5 +33,6 @@ instance Typeable Error where
   typeOf _ = mkTyConApp (mkTyCon "DBus.Error") []
 instance Show Error where
   show (Error name message) = "D-Bus Error (" ++ name ++ "): " ++ message
+instance Exception Error
 
 -- vim: set ts=2 sw=2 tw=72 et ft=haskell :
Index: archhaskell-habs/haskell-dbus/src/DBus-0.4/DBus/Internal.hsc
===================================================================
--- archhaskell-habs.orig/haskell-dbus/src/DBus-0.4/DBus/Internal.hsc
+++ archhaskell-habs/haskell-dbus/src/DBus-0.4/DBus/Internal.hsc
@@ -9,7 +9,7 @@
 
 module DBus.Internal where
 
-import Control.Exception (throwDyn)
+import Control.Exception (throwIO)
 import Control.Monad (when)
 import DBus (Error(..))
 import Foreign
@@ -57,6 +57,6 @@ withErrorP f =
       else do name <- #{peek DBusError, name} err >>= peekCString
               msg  <- #{peek DBusError, message} err >>= peekCString
               error_free err
-              throwDyn $ Error name msg
+              throwIO $ Error name msg
 
 -- vim: set ts=2 sw=2 tw=72 et ft=haskell :
Index: archhaskell-habs/haskell-dbus/src/DBus-0.4/DBus/Message.hsc
===================================================================
--- archhaskell-habs.orig/haskell-dbus/src/DBus-0.4/DBus/Message.hsc
+++ archhaskell-habs/haskell-dbus/src/DBus-0.4/DBus/Message.hsc
@@ -38,9 +38,9 @@ import Data.Int
 import Data.Word
 import Data.Char
 import Data.Dynamic
-import Foreign
+import Foreign hiding (unsafePerformIO)
 import Foreign.C.String
-import Foreign.C.Types (CInt)
+import Foreign.C.Types (CInt(..))
 import System.IO.Unsafe
 
 import DBus.Internal
Index: archhaskell-habs/haskell-dbus/src/DBus-0.4/DBus/Connection.hsc
===================================================================
--- archhaskell-habs.orig/haskell-dbus/src/DBus-0.4/DBus/Connection.hsc
+++ archhaskell-habs/haskell-dbus/src/DBus-0.4/DBus/Connection.hsc
@@ -24,7 +24,7 @@ import Control.Exception (bracket)
 import Control.Monad (when)
 import Foreign
 import Foreign.C.String
-import Foreign.C.Types (CInt)
+import Foreign.C.Types (CInt(..))
 
 import DBus.Internal
 import DBus.Message
