#!/bin/bash
#
# This script compiles the Haskell ABS tree.
#

ALL_OFF="$(tput sgr0)"
BOLD="$(tput bold)"
BLUE="${BOLD}$(tput setaf 4)"
GREEN="${BOLD}$(tput setaf 2)"
RED="${BOLD}$(tput setaf 1)"
YELLOW="${BOLD}$(tput setaf 3)"

msg() {
    local msg=$1; shift
    printf "${GREEN}==>${ALL_OFF}${BOLD} ${msg}${ALL_OFF}\n" $@ >&2
}

error() {
    local msg=$1; shift
    printf "${RED}==> ERROR:${ALL_OFF}${BOLD} ${msg}${ALL_OFF}\n" $@ >&2
}

die() {
    local msg=$1; shift
    [ -n "${msg}" ] && error "${msg}" $@
    exit 1
}

usage() {
    cat << EOF
Usage: $0 [options]

Options:
-h          This help
-a <arch>   Architecture to build for i686 or x86_64 (defaults to your architecture)
-b <dir>    Location of your HABS dir (default ./habs)
-c          Clean the build chroot before building
-l <dir>    Location of the chroots (default .)
-x          Update the pristine chroot first (implies -c)
EOF
}

set -eu
shopt -s nullglob
export LC_ALL="C"

# default values for argument
build_arch=$(uname -m) || die "cannot determine host architecture"
update_pristine_chroot=n
clean_build_chroot=n
chroot_dir=.
habs_dir=./habs

while getopts hxca:l:b: opt; do
    case "${opt}" in
        h) usage; exit 0;;
        x) update_pristine_chroot=y;;
        c) clean_build_chroot=y;;
        a) build_arch=${OPTARG};;
        l) chroot_dir="${OPTARG}";;
        b) habs_dir="${OPTARG}";;
    esac
done
shift $((OPTIND - 1))

CHROOT_DIR="$(readlink -f ${chroot_dir}/chroot-${build_arch})"
CHROOT_ROOTDIR="${CHROOT_DIR}/root"
CHROOT_COPYDIR="${CHROOT_DIR}/copy"

# If the chroot sandbox doesn't exist, create it.
if [ ! -d "${CHROOT_DIR}" ]; then
    msg "Creating the pristine chroot: ${CHROOT_DIR} ..."
    sudo mkdir -p "${CHROOT_DIR}"

    pacman_conf=$(mktemp "/tmp/pacman-habs-XXX.conf") || die "failed to create temporary file"
    trap 'rm -f "${pacman_conf}"' 0
    cat >"${pacman_conf}" <<EOF
[options]
HoldPkg     = pacman glibc
SyncFirst   = pacman
Architecture = auto

[core]
Include = /etc/pacman.d/mirrorlist

[extra]
Include = /etc/pacman.d/mirrorlist

[community]
Include = /etc/pacman.d/mirrorlist

[repo]
Server = file:///repo

[haskell]
Server = http://andromeda.kiwilight.com/\$repo/\$build_arch
EOF

    sudo setarch "${build_arch}" mkarchroot -f -C ${pacman_conf} \
        -M "/usr/share/devtools/makepkg-${build_arch}.conf" "${CHROOT_ROOTDIR}" \
        util-linux-ng pacman file wget base-devel sudo ghc

    # Create mock package files
    sudo mkdir "${CHROOT_ROOTDIR}/repo"
    for f in $(rsync -rtlvH --delay-updates --safe-links \
            rsync://andromeda.kiwilight.com/haskell/${build_arch}/ . | grep pkg.tar.xz); do
        sudo touch "${CHROOT_COPYDIR}/repo/${f}"
    done

    update_pristine_chroot=n
    msg "Done!"
fi

if [[ "x${update_pristine_chroot}" == "xy" ]]; then
    msg "Updating the pristine chroot ..."
    sudo setarch ${build_arch} mkarchroot -u ${CHROOT_ROOTDIR}
    sudo rm -rf "${CHROOT_ROOTDIR}/repo"
    sudo mkdir "${CHROOT_ROOTDIR}/repo"
    for f in $(rsync -n -rtlvH --delay-updates --safe-links \
            rsync://andromeda.kiwilight.com/haskell/${build_arch}/ . | grep pkg.tar.xz); do
        sudo touch "${CHROOT_ROOTDIR}/repo/${f}"
    done

    clean_build_chroot=y
    msg "Done!"
fi

if [[ "x${clean_build_chroot}" == "xy" ]]; then
    msg "Cleaning the build chroot ..."
    sudo rsync -a --delete -q -W -x "${CHROOT_ROOTDIR}/" "${CHROOT_COPYDIR}"
    msg "Done!"
fi

# Compute the list of all available packages in a buildable order.
pkglist=$(
    for name in ${habs_dir}/*; do
        source "${name}/PKGBUILD"
        echo "${pkgname} non-existent-dummy-package"
        for dep in ${depends[@]} ${makedepends[@]:-}; do
            if [[ "${dep}" =~ ([^=\<\>]+) ]]; then
                dep="${BASH_REMATCH[1]}"
                if [ -d "${habs_dir}/${dep}" ]; then
                    echo "${pkgname} ${dep}"
                fi
            else
                die "can't parse dependencies of ${name}/PKGBUILD"
            fi
        done
    done | tsort | tac | sed -e "/^non-existent-dummy-package/d"
    )

# Build all packages that don't exist in the repository yet.
for name in ${pkglist}; do
    source "${habs_dir}/${name}/PKGBUILD"
    pkgspec="${pkgname}-${pkgver}-${pkgrel}"
    outname="${pkgspec}-${build_arch}.pkg.tar.xz"

    if [ -f "${CHROOT_COPYDIR}/repo/${outname}" -o -f "${CHROOT_ROOTDIR}/repo/${outname}" ]; then
        msg "Not building ${outname} (already built)."
    else
        msg "Building ${outname} ..."
        (cd ${habs_dir}/${pkgname}; sudo setarch "${build_arch}" makechrootpkg -u -d -r "${CHROOT_DIR}")
    fi
done

# vim: set tw=0 :
